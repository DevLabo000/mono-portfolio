/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.11
 */
import { faker } from '@faker-js/faker';
import { http, HttpResponse, delay } from 'msw';
import type { User } from '.././types';

export const getCreateUsersWithListInputResponseMock = (overrideResponse: any = {}): User => ({
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  password: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  phone: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  username: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  userStatus: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  ...overrideResponse,
});

export const getLoginUserResponseMock = (): string => faker.word.sample();

export const getGetUserByNameResponseMock = (overrideResponse: any = {}): User => ({
  email: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  password: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  phone: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  username: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  userStatus: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  ...overrideResponse,
});

export const getCreateUserMockHandler = () => {
  return http.post('*/user', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getCreateUsersWithListInputMockHandler = (overrideResponse?: User) => {
  return http.post('*/user/createWithList', async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(overrideResponse ? overrideResponse : getCreateUsersWithListInputResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  });
};

export const getLoginUserMockHandler = (overrideResponse?: string) => {
  return http.get('*/user/login', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getLoginUserResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getLogoutUserMockHandler = () => {
  return http.get('*/user/logout', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getGetUserByNameMockHandler = (overrideResponse?: User) => {
  return http.get('*/user/:username', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetUserByNameResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getUpdateUserMockHandler = () => {
  return http.put('*/user/:username', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getDeleteUserMockHandler = () => {
  return http.delete('*/user/:username', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};
export const getUserMock = () => [
  getCreateUserMockHandler(),
  getCreateUsersWithListInputMockHandler(),
  getLoginUserMockHandler(),
  getLogoutUserMockHandler(),
  getGetUserByNameMockHandler(),
  getUpdateUserMockHandler(),
  getDeleteUserMockHandler(),
];
