/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.11
 */
import { faker } from '@faker-js/faker';
import { http, HttpResponse, delay } from 'msw';
import type { ApiResponse, Pet } from '.././types';

export const getUpdatePetResponseMock = (overrideResponse: any = {}): Pet => ({
  category: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  name: faker.word.sample(),
  photoUrls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
    faker.word.sample(),
  ),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(['available', 'pending', 'sold'] as const),
    undefined,
  ]),
  tags: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getAddPetResponseMock = (overrideResponse: any = {}): Pet => ({
  category: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  name: faker.word.sample(),
  photoUrls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
    faker.word.sample(),
  ),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(['available', 'pending', 'sold'] as const),
    undefined,
  ]),
  tags: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getFindPetsByStatusResponseMock = (overrideResponse: any = {}): Pet[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    category: faker.helpers.arrayElement([
      {
        id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      },
      undefined,
    ]),
    id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
    name: faker.word.sample(),
    photoUrls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
      faker.word.sample(),
    ),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(['available', 'pending', 'sold'] as const),
      undefined,
    ]),
    tags: faker.helpers.arrayElement([
      Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    ...overrideResponse,
  }));

export const getFindPetsByTagsResponseMock = (overrideResponse: any = {}): Pet[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    category: faker.helpers.arrayElement([
      {
        id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      },
      undefined,
    ]),
    id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
    name: faker.word.sample(),
    photoUrls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
      faker.word.sample(),
    ),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement(['available', 'pending', 'sold'] as const),
      undefined,
    ]),
    tags: faker.helpers.arrayElement([
      Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    ...overrideResponse,
  }));

export const getGetPetByIdResponseMock = (overrideResponse: any = {}): Pet => ({
  category: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  name: faker.word.sample(),
  photoUrls: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
    faker.word.sample(),
  ),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(['available', 'pending', 'sold'] as const),
    undefined,
  ]),
  tags: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUploadFileResponseMock = (overrideResponse: any = {}): ApiResponse => ({
  code: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), undefined]),
  message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getUpdatePetMockHandler = (overrideResponse?: Pet) => {
  return http.put('*/pet', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getUpdatePetResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getAddPetMockHandler = (overrideResponse?: Pet) => {
  return http.post('*/pet', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getAddPetResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getFindPetsByStatusMockHandler = (overrideResponse?: Pet[]) => {
  return http.get('*/pet/findByStatus', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getFindPetsByStatusResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getFindPetsByTagsMockHandler = (overrideResponse?: Pet[]) => {
  return http.get('*/pet/findByTags', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getFindPetsByTagsResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getGetPetByIdMockHandler = (overrideResponse?: Pet) => {
  return http.get('*/pet/:petId', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetPetByIdResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getUpdatePetWithFormMockHandler = () => {
  return http.post('*/pet/:petId', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getDeletePetMockHandler = () => {
  return http.delete('*/pet/:petId', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};

export const getUploadFileMockHandler = (overrideResponse?: ApiResponse) => {
  return http.post('*/pet/:petId/uploadImage', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getUploadFileResponseMock()), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};
export const getPetMock = () => [
  getUpdatePetMockHandler(),
  getAddPetMockHandler(),
  getFindPetsByStatusMockHandler(),
  getFindPetsByTagsMockHandler(),
  getGetPetByIdMockHandler(),
  getUpdatePetWithFormMockHandler(),
  getDeletePetMockHandler(),
  getUploadFileMockHandler(),
];
